#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node in the binary search tree
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node with a given value
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the Binary Search Tree
struct Node* insert(struct Node* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    
    if (value < root->data) {
        root->left = insert(root->left, value);  // Insert in the left subtree
    } else if (value > root->data) {
        root->right = insert(root->right, value); // Insert in the right subtree
    }

    return root;
}

// Function to search for a value in the Binary Search Tree
struct Node* search(struct Node* root, int value) {
    if (root == NULL || root->data == value) {
        return root;
    }

    if (value < root->data) {
        return search(root->left, value); // Search in the left subtree
    } else {
        return search(root->right, value); // Search in the right subtree
    }
}

// In-order traversal (left-root-right)
void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);  // Traverse left subtree
        printf("%d ", root->data);     // Visit root
        inorderTraversal(root->right); // Traverse right subtree
    }
}

// Pre-order traversal (root-left-right)
void preorderTraversal(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);     // Visit root
        preorderTraversal(root->left); // Traverse left subtree
        preorderTraversal(root->right); // Traverse right subtree
    }
}

// Post-order traversal (left-right-root)
void postorderTraversal(struct Node* root) {
    if (root != NULL) {
        postorderTraversal(root->left); // Traverse left subtree
        postorderTraversal(root->right); // Traverse right subtree
        printf("%d ", root->data);      // Visit root
    }
}

// Driver code
int main() {
    struct Node* root = NULL;

    // Inserting nodes into the BST
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);

    // Traversals
    printf("In-order traversal: ");
    inorderTraversal(root);
    printf("\n");

    printf("Pre-order traversal: ");
    preorderTraversal(root);
    printf("\n");

    printf("Post-order traversal: ");
    postorderTraversal(root);
    printf("\n");

    // Searching for a node in the BST
    int searchValue = 40;
    struct Node* searchResult = search(root, searchValue);
    if (searchResult != NULL) {
        printf("Node with value %d found.\n", searchValue);
    } else {
        printf("Node with value %d not found.\n", searchValue);
    }

    return 0;
}


OUTPUT:

In-order traversal: 20 30 40 50 60 70 80 
Pre-order traversal: 50 30 20 40 70 60 80 
Post-order traversal: 20 40 30 60 80 70 50 
Node with value 40 found.

